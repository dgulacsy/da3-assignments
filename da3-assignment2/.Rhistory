names(df)[names(df) == 'profit_loss_year'] <- 'profit'
# Label Engineering -------------------------------------------------------
# add all missing year and comp_id combinations -
df <- df %>%
complete(year, comp_id)
# generate dummy var is_fg (fast growth); if sales larger than zero and not-NA, then firm is alive
df  <- df %>%
mutate(status_alive = sales > 0 & !is.na(sales) %>%
as.numeric(.))
# generate dummy var is_fg (fast growth)
df <- df %>%
group_by(comp_id) %>%
mutate(is_fg = ((status_alive == 1) & (lead(status_alive, 2) == 1) & (lead(profit, 2)-profit)/abs(profit)>0.1) %>%
as.numeric(.)) %>%
ungroup()
# Examples
# The company grows large sometimes
df[df$comp_id=="1014183",c("year","profit","is_fg","status_alive","sales")]
# The company goes bankrupt losses are decreasing but without any sales
df[df$comp_id=="1001034",c("year","profit","is_fg","status_alive","sales")]
# Filter the data where we have an outcome variable
df <- df %>%
filter(year <=2013)
# Feature Engineering Part 1 -----------------------------------------------------
# Add different transformations of sales variable
df <- df %>%
mutate(sales = ifelse(sales < 0, 1, sales),
ln_sales = ifelse(sales > 0, log(sales), 0),
sales_mil=sales/1000000,
sales_mil_log = ifelse(sales > 0, log(sales_mil), 0))
# Add log sales difference variable
df <- df %>%
group_by(comp_id) %>%
mutate(d1_sales_mil_log = sales_mil_log - Lag(sales_mil_log, 1) ) %>%
mutate(d1_profit = profit - Lag(profit, 1)) %>%
ungroup()
# replace w 0 for new firms + add dummy to capture it
df <- df %>%
mutate(age = (year - founded_year) %>%
ifelse(. < 0, 0, .),
new = as.numeric(age <= 1) %>% #  (age could be 0,1 )
ifelse(balsheet_notfullyear == 1, 1, .),
d1_sales_mil_log = ifelse(new == 1, 0, d1_sales_mil_log),
new = ifelse(is.na(d1_sales_mil_log), 1, new),
d1_sales_mil_log = ifelse(is.na(d1_sales_mil_log), 0, d1_sales_mil_log))
# Sample Design -----------------------------------------------------
df <- df %>%
filter((year == 2012) & (status_alive == 1)) %>%
# look at firms below 10m euro revenues and above 1000 euros
filter(!(sales_mil > 10)) %>%
filter(!(sales_mil < 0.001))
describe(df$is_fg)
describe(df$profit/10^6)
describe(df$sales_mil)
# filter out error suspicious observation
df <- df %>% filter(profit>(-10)*10^6)
# Feature Engineering Part 2 -----------------------------------------------------
# General Firm Characteristics --------------------------------------------
# Aggregate Industry codes into categories
# change some industry category codes
df <- df %>%
mutate(ind2_cat = ind2 %>%
ifelse(. > 56, 60, .)  %>%
ifelse(. < 26, 20, .) %>%
ifelse(. < 55 & . > 35, 40, .) %>%
ifelse(. == 31, 30, .) %>%
ifelse(is.na(.), 99, .)
)
# Firm characteristics
df <- df %>%
mutate(age2 = age^2,
ceo_foreign = factor(ifelse(foreign>=0.5,"foreign","domestic")),
ceo_female = factor(cut(female,breaks = c(-1,0.4,0.6,1),labels = c("male","balanced","female"))),
ceo_gender = factor(gender, levels = c("female", "male", "mix")),
ceo_origin = factor(df$origin, levels = c("Domestic", "Foreign", "mix")),
ceo_inoffice_years = inoffice_days/365)
# Financial indicators, ratios --------------------------------------------
# assets can't be negative. Change them to 0 and add a flag.
df <-df  %>%
mutate(flag_asset_problem=ifelse(intang_assets<0 | curr_assets<0 | fixed_assets<0,1,0  ))
table(df$flag_asset_problem)
# replace negative asset values with 0
df <- df %>%
mutate(intang_assets = ifelse(intang_assets < 0, 0, intang_assets),
curr_assets = ifelse(curr_assets < 0, 0, curr_assets),
fixed_assets = ifelse(fixed_assets < 0, 0, fixed_assets))
# generate total assets
df <- df %>%
mutate(total_assets = intang_assets + curr_assets + fixed_assets,
total_liabs = total_assets-share_eq)
summary(df$total_assets)
summary(df$total_liabs)
# Generate Ratios
pl_names <- c("extra_exp","extra_inc",  "extra_profit_loss", "inc_bef_tax" ,"inventories",
"material_exp", "profit", "personnel_exp")
bs_names <- c("intang_assets", "curr_liab", "fixed_assets", "liq_assets", "curr_assets",
"share_eq", "subscribed_cap", "tang_assets" )
# divide all pl_names elements by sales and create new column for it
df <- df %>%
mutate_at(vars(pl_names), funs("pl"=./sales))
# divide all bs_names elements by total_assets and create new column for it
df <- df %>%
mutate_at(vars(bs_names), funs("bs"=ifelse(total_assets == 0, 0, ./total_assets)))
# Special financial ratios ------------------------------------------------
# Liquidity Ratios
# Current ratio: company’s ability to pay off short-term liabilities with current assets
df <- df %>%
mutate(curr_ratio=ifelse(curr_liab==0,curr_assets/1,
ifelse(curr_liab>0,curr_assets/curr_liab,
ifelse(curr_assets>0,(curr_assets-curr_liab)/1,curr_liab/curr_assets))))
describe(df$curr_ratio)
# Cash ratio: measures a company’s ability to pay off short-term liabilities with cash and cash equivalents
df <- df %>%
mutate(cash_ratio=ifelse(curr_liab==0,liq_assets/1,
ifelse(curr_liab>0,liq_assets/curr_liab,
ifelse(liq_assets>0,(liq_assets+curr_liab)/1,curr_liab/liq_assets))))
describe(df$cash_ratio)
# Leverage Ratios
# Debt ratio: measures the relative amount of a company’s assets that are provided from debt:
df <- df %>%
mutate(dta_ratio=ifelse(total_liabs<0,0,
ifelse(total_assets==0,total_liabs/1,total_liabs/total_assets)))
describe(df$dta_ratio)
# Debt to Equity ratio: calculates the weight of total debt and financial liabilities against shareholders’ equity
df <- df %>%
mutate(dte_ratio=ifelse(share_eq==0,total_liabs/1,
ifelse(share_eq>0,total_liabs/share_eq,total_liabs/1)))
describe(df$dte_ratio)
# Efficiency Ratios
# Asset Turnover Ratio: measures a company’s ability to generate sales from assets
df <- df %>%
mutate(at_ratio=ifelse(total_assets==0,NA,sales/total_assets))
# Return on Assets ratio: measures how efficiently a company is using its assets to generate profit:
df <- df %>%
mutate(roa_ratio=ifelse(total_assets==0,NA,profit/total_assets))
describe(df$roa_ratio)
# Return on Equity ratio: measures how efficiently a company is using its equity to generate profit
df <- df %>%
mutate(roe_ratio=ifelse(share_eq==0,NA,
ifelse(share_eq>0,profit/share_eq,(-1)*profit/share_eq)))
describe(df$roe_ratio)
# Creating flags, and winsorizing tails -----------------------------------
# Variables that represent accounting items that cannot be negative (e.g. materials)
zero <-  c("extra_exp_pl", "extra_inc_pl", "inventories_pl", "material_exp_pl", "personnel_exp_pl",
"curr_liab_bs", "fixed_assets_bs", "liq_assets_bs", "curr_assets_bs", "subscribed_cap_bs",
"intang_assets_bs")
df <- df %>%
mutate_at(vars(zero), funs("flag_high"= as.numeric(.> 1))) %>%
mutate_at(vars(zero), funs(ifelse(.> 1, 1, .))) %>%
mutate_at(vars(zero), funs("flag_error"= as.numeric(.< 0))) %>%
mutate_at(vars(zero), funs(ifelse(.< 0, 0, .)))
# for vars that could be any, but are mostly between -1 and 1
any <-  c("extra_profit_loss_pl", "inc_bef_tax_pl", "profit_pl", "share_eq_bs")
df <- df %>%
mutate_at(vars(any), funs("flag_low"= as.numeric(.< -1))) %>%
mutate_at(vars(any), funs(ifelse(.< -1, -1, .))) %>%
mutate_at(vars(any), funs("flag_high"= as.numeric(.> 1))) %>%
mutate_at(vars(any), funs(ifelse(.> 1, 1, .))) %>%
mutate_at(vars(any), funs("flag_zero"= as.numeric(.== 0))) %>%
mutate_at(vars(any), funs("quad"= .^2))
# dropping flags with no variation
variances<- df %>%
select(contains("flag")) %>%
apply(2, var, na.rm = TRUE) == 0
df <- df %>%
select(-one_of(names(variances)[variances]))
# Extra Imputed Features ----------------------------------------------------------
# CEO age
df <- df %>%
mutate(ceo_age = year-birth_year,
flag_low_ceo_age = as.numeric(ceo_age < 25 & !is.na(ceo_age)),
flag_high_ceo_age = as.numeric(ceo_age > 75 & !is.na(ceo_age)),
flag_miss_ceo_age = as.numeric(is.na(ceo_age)))
df <- df %>%
mutate(ceo_age = ifelse(ceo_age < 25, 25, ceo_age) %>%
ifelse(. > 75, 75, .) %>%
ifelse(is.na(.), mean(., na.rm = TRUE), .),
ceo_young = as.numeric(ceo_age < 40))
# number emp, very noisy measure, impute with mean
df <- df %>%
mutate(labor_avg = ifelse(is.na(labor_avg), mean(labor_avg, na.rm = TRUE), labor_avg),
flag_miss_labor_avg = as.numeric(is.na(labor_avg)))
# create factors
df <- df %>%
mutate(urban = factor(urban_m, levels = c(1,2,3)) %>%
recode(., `1` = 'capital', `2` = "city",`3` = "other"),
region = factor(region_m, levels = c("Central", "East", "West")),
ind2_cat = factor(ind2_cat, levels = sort(unique(df$ind2_cat))))
df <- df %>%
mutate(f_is_fg = factor(is_fg, levels = c(0,1)) %>%
recode(., `0` = 'no_fast_gowth', `1` = "fast_growth"))
# store comp_id as character
df$comp_id<-as.character(df$comp_id)
# Rows without target variables
df <- df[complete.cases(df[,"f_is_fg"]),]
# Variable Sets
aux<- c("comp_id")
target <- c("f_is_fg","is_fg")
business<- c("ind2_cat","urban","region","labor_avg","flag_miss_labor_avg","age","age2","new")
ceo<- c("ceo_inoffice_years","ceo_age","flag_low_ceo_age","flag_high_ceo_age","flag_miss_ceo_age","ceo_count",
"ceo_female","ceo_foreign","ceo_gender","ceo_origin")
sales<-c("sales_mil_log","d1_sales_mil_log")
financial_basic <- c("sales_mil","curr_assets","curr_liab","fixed_assets","tang_assets",
"intang_assets","inventories","liq_assets","subscribed_cap",
"share_eq","material_exp","personnel_exp","amort","profit")
financial_ext <- c("extra_exp","extra_inc","extra_profit_loss","inc_bef_tax","d1_profit")
financial_basic_ratios <- colnames(df %>% select(matches("*._bs|*._pl")))
financial_basic_ratios <- colnames(df %>% select(matches("*._bs|*._pl")))
df %>% select(matches("*._bs|*._pl"))
str(df)
df %>% select(matches("*_bs|*_pl"))
select(df,matches("*._bs|*._pl"))
select(df,matches("*._ratio"))
rm(list = ls())
# General
library(tidyverse)
# Modeling
library(caret)
# Parallel Computation
library(parallel)
library(doParallel)
# Visualization
library(cowplot)
library(party)
library(GGally)
library(pROC)
library(knitr)
source("codes/helper.R")
df <- read_rds("data/clean/fast-growth-firms-workfile.rds")
# skim(df)
# create smaller sample to test models
# samp_size <- round(nrow(df) / 20)
# set.seed(1234)
# df <- sample_n(df, samp_size)
set.seed(1234)
training_ratio <- 0.7
train_indices <- createDataPartition(
y = df[["is_fg"]],
times = 1,
p = training_ratio,
list = FALSE
) %>% as.vector()
data_train <- df[train_indices, ]
data_test <- df[-train_indices, ]
financial_basic_ratios <- colnames(df %>% select(matches("*._bs|*._pl")))
# Variable sets
target <- c("f_is_fg","is_fg")
business<- c("ind2_cat","urban","region","labor_avg","flag_miss_labor_avg","age","age2","new")
ceo<- c("ceo_inoffice_years","ceo_age","flag_low_ceo_age","flag_high_ceo_age","flag_miss_ceo_age","ceo_count",
"ceo_female","ceo_foreign","ceo_gender","ceo_origin")
sales<-c("sales_mil_log","d1_sales_mil_log")
financial_basic <- c("sales_mil","curr_assets","curr_liab","fixed_assets","tang_assets",
"intang_assets","inventories","liq_assets","subscribed_cap",
"share_eq","material_exp","personnel_exp","amort","profit")
financial_ext <- c("extra_exp","extra_inc","extra_profit_loss","inc_bef_tax","d1_profit")
financial_basic_ratios <- colnames(df %>% select(matches("*._bs|*._pl")))
financial_ext_ratios <- colnames(df %>% select(matches("*._ratio")))
# Interactions
X1<-paste("ind2_cat",c("urban","region","labor_avg","age","sales_mil_log","d1_sales_mil_log","ceo_age","ceo_female","ceo_foreign"),sep = '*')
formula_lpm = formula(paste0(target, paste0(" ~ ",paste(c(business, ceo,sales, financial_basic, financial_ext, financial_basic_ratios, financial_ext_ratios),collapse = " + "))))
formula_log = formula(paste0(target, paste0(" ~ ",paste(c(business, ceo,sales, financial_basic, financial_ext, financial_basic_ratios, financial_ext_ratios),collapse = " + "))))
formula_rf = formula(paste0(target, paste0(" ~ ",paste(c(business, ceo, financial_basic, financial_ext),collapse = " + "))))
formula_gbm = formula(paste0(target, paste0(" ~ ",paste(c(business, ceo, financial_basic, financial_ext),collapse = " + "))))
formula_knn = formula(paste0(target, paste0(" ~ ",paste(c(business, ceo, financial_basic, financial_ext),collapse = " + "))))
formula_enet = formula(paste0(target, paste0(" ~ ",paste(c(business, ceo, financial_basic, financial_ext,financial_basic_ratios,financial_ext_ratios,X1),collapse = " + "))))
ggplot(df,aes(x=sales_mil_log,y=f_is_fg))+
geom_boxplot(outlier.colour="purple", outlier.shape=16, outlier.alpha = 0.7)
ggplot(df,aes(x=sales_mil_log,y=f_is_fg))+
geom_boxplot(outlier.colour="purple", outlier.shape=16, outlier.alpha = 0.5)
ggplot(df,aes(x=ind2_cat,y=f_is_fg))+
geom_boxplot(outlier.colour="purple", outlier.shape=16, outlier.alpha = 0.5)
ggplot(df,aes(x=d1_profit,y=f_is_fg))+
geom_boxplot(outlier.colour="purple", outlier.shape=16, outlier.alpha = 0.5)
ggplot(df,aes(x=profit_pl,y=f_is_fg))+
geom_boxplot(outlier.colour="purple", outlier.shape=16, outlier.alpha = 0.5)
ggplot(df,aes(x=roa_ratio,y=f_is_fg))+
geom_boxplot(outlier.colour="purple", outlier.shape=16, outlier.alpha = 0.5)
ggplot(df,aes(x=roe_ratio,y=f_is_fg))+
geom_boxplot(outlier.colour="purple", outlier.shape=16, outlier.alpha = 0.5)
ggplot(df,aes(x=curr_ratio,y=f_is_fg))+
geom_boxplot(outlier.colour="purple", outlier.shape=16, outlier.alpha = 0.5)
ggplot(df,aes(x=curr_liab_bs,y=f_is_fg))+
geom_boxplot(outlier.colour="purple", outlier.shape=16, outlier.alpha = 0.5)
```{r}
rm(list = ls())
# General
library(tidyverse)
# Modeling
library(caret)
# Parallel Computation
library(parallel)
library(doParallel)
# Visualization
library(cowplot)
library(party)
library(GGally)
library(pROC)
library(knitr)
source("codes/helper.R")
```
# Introduction
In this analytics project we are aiming to find the best model to identify fast growth firms based on their various characteristics and financial indicators. To place this task into a business environment we assumed that the main business motivation behind this whole analytics project is to identify those firms that worth investing in. We did not define a specific form of investment worth considering the recommended firms may be considered for fusion, acquisition or simple buy-in. To find the best a model, first of all we go through all the steps of sample design, label engineering and feature engineering. We also look at some results of our exploratory data analysis to see which particular aspects of the data we should keep in mind and what kind of model specifications we should come up. During our analysis we run altogether 7 probability prediction models and we do classification on 3 of them. We compare and assess their results and recommend a final model for the classification problem.
# Label engineering
In order to build a model to classify business fast growing and not we first of all need to define which firms we regards as fast growing. In our analysis we used the annual profit as a starting point. We considered those companies as fast growing which had larger than 10% profit growth on a 2-years basis. Since profit might be negative we needed to be thoughtful. Eventually, we decided to also include those firms in the "fast growth" category which had losses in the base year but at least 10% less losses two years later. Although this form of definition may seem logical we had to go through lot of alternatives. First of all we could have used sales rather than profit but we thought that profit is closer in meaning to value creation from a business side. Revenue may increase slower than operational expenses or even COGS which indeed may indicate fast growth but certainly not a sustainable one. Secondly, we might have also chosen to use a one year period however, we wanted to make sure the growth is not tied to a one-off event but it is rather start of a long-term positive trend. We could have also chosen to use a relative threshold to define large growth. The main advantage of such threshold is that it takes into account general economic circumstances since companies are compared to each other. This means that in case of an unfavorable environment we would detect the most successful survivers who can even grow in an adverse situation however this growth is likely to be incremental to generate substantial financial gain on the short term. This approach is rather focused on further cash flows. However with using an absolute threshold we get a more consistent rule and more focused on short-term cash flows.
# Data Cleaning/Wrangling
To conduct our analysis we used a dataset from the information company Bisnode. After creating a binary variable indicating a fast growing firm, we filtered down the data to the year 2012. We discarded firms which had more than 10 million or less than 1000 Euros in sales. We did this to only have quite normal (mid-sized, post-revenue) businesses in our sample. Using the available data extracted from general ledgers we calculated transformed variables and some financial ratios like the current ratio, asset turnover ratio, ROE and ROA.
# Model preparation
## Train test split
```{r}
df <- read_rds("data/clean/fast-growth-firms-workfile.rds")
# skim(df)
# create smaller sample to test models
# samp_size <- round(nrow(df) / 20)
# set.seed(1234)
# df <- sample_n(df, samp_size)
set.seed(1234)
training_ratio <- 0.7
train_indices <- createDataPartition(
y = df[["is_fg"]],
times = 1,
p = training_ratio,
list = FALSE
) %>% as.vector()
data_train <- df[train_indices, ]
data_test <- df[-train_indices, ]
```
## Variable selection
```{r}
# Variable sets
target <- c("f_is_fg","is_fg")
business<- c("ind2_cat","urban","region","labor_avg","flag_miss_labor_avg","age","age2","new")
ceo<- c("ceo_inoffice_years","ceo_age","flag_low_ceo_age","flag_high_ceo_age","flag_miss_ceo_age","ceo_count",
"ceo_female","ceo_foreign","ceo_gender","ceo_origin")
sales<-c("sales_mil_log","d1_sales_mil_log")
financial_basic <- c("sales_mil","curr_assets","curr_liab","fixed_assets","tang_assets",
"intang_assets","inventories","liq_assets","subscribed_cap",
"share_eq","material_exp","personnel_exp","amort","profit")
financial_ext <- c("extra_exp","extra_inc","extra_profit_loss","inc_bef_tax","d1_profit")
financial_basic_ratios <- colnames(df %>% select(matches("*._bs|*._pl")))
financial_ext_ratios <- colnames(df %>% select(matches("*._ratio")))
# Interactions
X1<-paste("ind2_cat",c("urban","region","labor_avg","age","sales_mil_log","d1_sales_mil_log","ceo_age","ceo_female","ceo_foreign"),sep = '*')
formula_lpm = formula(paste0(target, paste0(" ~ ",paste(c(business, ceo,sales, financial_basic, financial_ext, financial_basic_ratios, financial_ext_ratios),collapse = " + "))))
formula_log = formula(paste0(target, paste0(" ~ ",paste(c(business, ceo,sales, financial_basic, financial_ext, financial_basic_ratios, financial_ext_ratios),collapse = " + "))))
formula_rf = formula(paste0(target, paste0(" ~ ",paste(c(business, ceo, financial_basic, financial_ext),collapse = " + "))))
formula_gbm = formula(paste0(target, paste0(" ~ ",paste(c(business, ceo, financial_basic, financial_ext),collapse = " + "))))
formula_knn = formula(paste0(target, paste0(" ~ ",paste(c(business, ceo, financial_basic, financial_ext),collapse = " + "))))
formula_enet = formula(paste0(target, paste0(" ~ ",paste(c(business, ceo, financial_basic, financial_ext,financial_basic_ratios,financial_ext_ratios,X1),collapse = " + "))))
```
# EDA
```{r}
p1<-ggplot(df,aes(x=sales_mil_log,y=f_is_fg))+
geom_boxplot(outlier.colour="purple", outlier.shape=16, outlier.alpha = 0.5)
ggplot(df,aes(x=roa_ratio,y=f_is_fg))+
geom_boxplot(outlier.colour="purple", outlier.shape=16, outlier.alpha = 0.5)
ggplot(df,aes(x=curr_liab_bs,y=f_is_fg))+
geom_boxplot(outlier.colour="purple", outlier.shape=16, outlier.alpha = 0.5)
# df %>% select(where(is.numeric)) %>% ggcorr(layout.exp = 1)
# ggpairs(df, columns = c(target, business))
# Check for multicollinearity and perfect collinearity
numeric_df <- keep( df , is.numeric )
cT <- cor(numeric_df , use = "complete.obs")
# Check for highly correlated values:
sum( abs( cT ) >= 0.8 & cT != 1 ) / 2
# Find the correlations which are higher than 0.8
id_cr <- which( abs( cT ) >= 0.8 & cT != 1 )
pair_names <- expand.grid( variable.names(numeric_df) , variable.names(numeric_df) )
# Get the pairs:
high_corr <- pair_names[ id_cr , ]
high_corr <- mutate( high_corr , corr_val = cT[ id_cr ] )
high_corr <- mutate(high_corr, Var1 = as.character(Var1))
high_corr <- mutate(high_corr, Var2 = as.character(Var2))
high_corr$vars<-unlist(lapply(1:nrow(high_corr),function(i){
paste(sort(c(high_corr$Var1[i],high_corr$Var2[i])), collapse = "")
}))
high_corr<-high_corr[!duplicated(high_corr$vars),] %>%
select(-vars) %>%
arrange(desc(abs(corr_val)))
kable(top_n(high_corr,5),caption = "Check variables for multicollinearity and perfect collinearity (showing only top 5)")
```
# Model building
```{r, results='hide'}
# Setup cluster for parallel computing
# cluster <- makeCluster(detectCores() - 1) # leave 1 core for OS
# registerDoParallel(cluster)
# Initialize lists
models <- list()
runtimes <- list()
# Setup CV
train_control <- trainControl(
method = "cv",
number = 10,
classProbs = TRUE,
summaryFunction = twoClassSummary,
savePredictions = TRUE,
allowParallel = TRUE,
verboseIter = TRUE
)
# LPM ------------------------
set.seed(1234)
start <- Sys.time()
model_lpm <- train(
formula_lpm,
method = "glm",
data = data_train,
trControl = train_control,
na.action = na.omit,
metric = "ROC"
)
end <- Sys.time()
# Save model props
models[["lpm"]] <- model_lpm
runtimes[["lpm"]] <- end-start
# Notification
time <- as.numeric(round(end - start, 2), unit = "mins")
modelname <- "**lpm model**"
send_message(my_text = paste0(user, ", your ", modelname, " has finished training! It took: ", time, " minutes."))
# Logit ------------------------
# Train model with CV
set.seed(1234)
start <- Sys.time()
model_logit <- train(
formula_log,
method = "glm",
data = data_train,
family = binomial(link = "logit"),
trControl = train_control,
na.action = na.omit,
metric = "ROC"
)
end <- Sys.time()
# Save model props
models[["logit"]] <- model_logit
runtimes[["logit"]] <- end-start
# Notification
time <- as.numeric(round(end - start, 2), unit = "mins")
modelname <- "**logit model**"
send_message(my_text = paste0(user, ", your ", modelname, " has finished training! It took: ", time, " minutes."))
# Train model with CV
set.seed(1234)
start <- Sys.time()
model_gbm <- train(formula_gbm,
data = data_train,
method = "gbm",
trControl = train_control,
verbose = 0,
# num.threads = 7,
na.action = na.omit)
end <- Sys.time()
# Save model props
models[["gbm"]] <- model_gbm
runtimes[["gbm"]] <- end-start
# Create calibration curves ----------------------
data_test$gbm_no_loss_pred <- predict(model_gbm, newdata = data_test, type = "prob")$fast_growth
calib_data<-data_test
calib_data<-na.omit(data_test)
calib_data$gbm_no_loss_pred <- predict(model_gbm, newdata = data_test, type = "prob")$fast_growth
calib_data$rf_no_loss_pred <- predict(model_rf, newdata = data_test, type = "prob")$fast_growth
calib_data$gbm_no_loss_pred <- predict(model_gbm, newdata = data_test, type = "prob")$fast_growth
calib_data<-na.omit(data_test)
calib_data$gbm_no_loss_pred <- predict(model_gbm, newdata = calib_data, type = "prob")$fast_growth
calib_data$rf_no_loss_pred <- predict(model_rf, newdata = calib_data, type = "prob")$fast_growth
calib_gbm<-create_calibration_plot(calib_data,
file_name = "best-model-calibration",
prob_var = "gbm_no_loss_pred",
actual_var = "is_fg",
n_bins = 10)
calib_rf<-create_calibration_plot(calib_data,
file_name = "best-model-calibration",
prob_var = "rf_no_loss_pred",
actual_var = "is_fg",
n_bins = 10)
calib_curves<-plot_grid(calib_gbm$plot+labs(subtitle = "GBM (No loss function)"),calib_rf$plot+labs(subtitle = "Random Forest (No loss function)"), nrow = 1,ncol=2)
kable(calib1$bins)
ggplot(data = df, aes(x=sales_mil_log, y=is_fg)) +
geom_point(size=2,  shape=20, stroke=2, fill="blue", color="blue") +
geom_smooth(method = "lm", formula = y ~ poly(x,2), color="red", se = F, size=1)+
geom_smooth(method="loess", se=F, colour="purple", size=1.5, span=0.9) +
labs(x = "sales_mil_log",y = "fast_growth")
ggplot(data = df, aes(x=d1_profit, y=is_fg)) +
geom_point(size=2,  shape=20, stroke=2, fill="blue", color="blue") +
geom_smooth(method = "lm", formula = y ~ poly(x,2), color="red", se = F, size=1)+
geom_smooth(method="loess", se=F, colour="purple", size=1.5, span=0.9) +
labs(x = "sales_mil_log",y = "fast_growth")
# EDA
```{r}
ggplot(data = df, aes(x=d1_profit, y=is_fg)) +
geom_point(size=2,  shape=20, stroke=2, fill="blue", color="blue") +
geom_smooth(method = "lm", formula = y ~ poly(x,2), color="red", se = F, size=1)+
geom_smooth(method="loess", se=F, colour="purple", size=1.5) +
labs(x = "sales_mil_log",y = "fast_growth")
select(df,f_is_fg)
select(df,c("f_is_fg","sales_mil","ceo_female","ceo_foreign"))
select(df,c("f_is_fg","sales_mil","age","curr_assets"))
# General
library(tidyverse)
library(Hmisc)
# Modeling
library(timeDate)
library(caret)
library(lubridate)
library(prophet)
# Parallel Computation
library(parallel)
library(doParallel)
# Visualization
library(stargazer)
library(cowplot)
library(party)
library(GGally)
library(pROC)
library(knitr)
