quarter = quarter(date),
month = factor(month(date)),
week= factor(week(date)),
day = day(date)) %>%
mutate(dow = factor(wday(date, week_start = getOption("lubridate.week.start", 1)))) %>%
mutate(weekend = factor(as.integer(dow %in% c(6,7))))
daily_agg <- daily_agg %>%
mutate(school_off = ((day>15 & month==5 & day <=30) | (month==6 |  month==7) |
(day<15 & month==8) | (day>20 & month==12) ))
daily_agg <- daily_agg %>%
mutate(trend = c(1:dim(daily_agg)[1]))
summary(daily_agg[,adm_types])
# Get holiday calendar ----------------------------------
holidays <-  as.Date(holidayNYSE(2010:2017))
daily_agg <- daily_agg %>%
mutate(isHoliday = ifelse(date %in% holidays,1,0))
describe(daily_agg)
# Define vars for analysis ----------------------------------
daily_agg <- daily_agg %>%
mutate(adm_core_mod = ifelse(adm_core<1, 1, adm_core),
ln_adm_core = log(adm_core_mod))
daily_agg <-
daily_agg %>%
group_by(month) %>%
mutate(adm_core_m = mean(adm_core)) %>%
ungroup()
adm_types_w<-paste(adm_types,"_w",sep="",collapse =NULL)
daily_agg <-
daily_agg %>%
group_by(week) %>%
mutate_at(vars(adm_types), funs("w"=mean(.))) %>%
ungroup() %>%
mutate_at(vars(all_of(adm_types_w)), funs("lag"=Lag(.,365)))
daily_agg <-
daily_agg %>%
group_by(month, dow) %>%
mutate(adm_core_md = mean(adm_core),
ln_adm_core_md = log(adm_core_md)) %>%
ungroup()
################################
# Descriptive graphs ----------
#################################
# named date vars for graphs
mydays <- c("Mon","Tue","Wed",
"Thu","Fri","Sat",
"Sun")
daily_agg$dow_abb   <- factor(   mydays[daily_agg$dow],  levels=mydays)
daily_agg$month_abb <- factor(month.abb[daily_agg$month],levels=month.abb)
# Graphs
# Month - year plot
g0<-ggplot(daily_agg,aes(x=year,y=adm_core))+
geom_bar(aes(fill=adm_core),position="dodge", stat="identity")+
facet_wrap(. ~ month_abb ,scales = 'free')+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
legend.position = "none")
g0
# ggsave("out/swimming_pools_month_admissions_core.png", dpi = 1200)
# Admission core 2015
g1 <-ggplot(data=daily_agg[daily_agg$year==2015,], aes(x=date, y=adm_com)) +
geom_line(size=0.4, color=color[1]) +
scale_x_date(breaks = as.Date(c("2015-01-01","2015-04-01","2015-07-01","2015-10-01","2016-01-01")),
labels = date_format("%d%b%Y"),
date_minor_breaks = "1 month" ) +
labs(title= "Number of tickets sold in 2015 (Core)", x = "Day", y="Number of tickets sold (Core, Daily)" ) +
scale_color_discrete(name = "")
g1
# ggsave("out/swimming_pools_2015_admissions_core.png", dpi = 1200)
# Admission core 2015 - other admissions 2015
gl<-list()
colnames(daily_agg %>% select(matches("*._lag")))
names<-c("Community","Lessons","Promotion","School","Spec Event","Swim Team")
lags<-colnames(daily_agg %>% select(matches("*._lag")))
names<-c("Community","Lessons","Promotion","School","Spec Event","Swim Team")
daily_agg<-daily_agg %>%
mutate_at(vars(all_of(lags)), funs("scaled"=scale(.)))
scaled_vars<-colnames(daily_agg %>% select(matches("*._lag_scaled")))[-1]
for (i in 1:6){
var<-scaled_vars[i]
name<-names[i]
p<-ggplot(data=daily_agg[daily_agg$year==2015,]) +
geom_line(aes(x=date, y=scale(adm_core), color="purple"),size=1) +
geom_line(aes_string(x="date", y=var, color=shQuote("orange")),size=1) +
scale_x_date(breaks = as.Date(c("2015-01-01","2015-04-01","2015-07-01","2015-10-01","2016-01-01")),
labels = date_format("%d%b%Y"),
date_minor_breaks = "1 month" ) +
labs(subtitle= paste0("Number of tickets sold in 2015"," (",name,")"), x = "Day", y="# Tickets"," (",names[i],",Daily)" ) +
scale_color_manual(name="Category", values=c(purple=color[1],orange=color[2]),labels = c("Core", name))+
theme(legend.position="bottom")
gl[[i]]<-p
}
gl_grid<-plot_grid(plotlist = gl,nrow = 3,ncol=2)
gl_grid
lags<-c("adm_com_w_lag","adm_less_w_lag","adm_sch_w_lag","adm_spec_w_lag","adm_swim_w_lag","adm_prom_w_lag")
lags<-c("adm_com_w_lag","adm_less_w_lag","adm_sch_w_lag","adm_spec_w_lag","adm_swim_w_lag","adm_prom_w_lag")
X1<-paste(lags,"month",sep="*")
X1
#########################################################################################
# DA3 Assignment 3
# Data Analysis Script
#
# GOAL:
# Use the ABQ swimming pool data
# Find all the open air pools and combine sales
# Clean and filter as you see fit -- create a daily data
# Build a daily predictive model that can forecast 12 months ahead
# Build three different models and compare performance
# Write a short report on your steps and result.
#
# Data Source
# Website:
# File:
#########################################################################################
# Initialize environment --------------------------------------------------
# CLEAR MEMORY
rm(list=ls())
# General
library(tidyverse)
library(Hmisc)
# Modeling
library(timeDate)
library(caret)
library(lubridate)
library(prophet)
# Parallel Computation
library(parallel)
library(doParallel)
# Visualization
library(stargazer)
library(ggplot2)
library(cowplot)
library(viridis)
library(party)
library(GGally)
library(pROC)
library(knitr)
source("codes/helper.R")
options(digits=3)
#import data
daily_agg<-read.csv("data/clean/swim_work.csv") %>%
mutate(date = as.Date(date))
adm_types<-colnames(daily_agg %>% select(matches("adm_.*")))
# dow: 1=Monday, weekend: Sat and Sun.
daily_agg <- daily_agg %>%
mutate(year = year(date),
quarter = quarter(date),
month = factor(month(date)),
week= factor(week(date)),
day = day(date)) %>%
mutate(dow = factor(wday(date, week_start = getOption("lubridate.week.start", 1)))) %>%
mutate(weekend = factor(as.integer(dow %in% c(6,7))))
daily_agg <- daily_agg %>%
mutate(school_off = ((day>15 & month==5 & day <=30) | (month==6 |  month==7) |
(day<15 & month==8) | (day>20 & month==12) ))
daily_agg <- daily_agg %>%
mutate(trend = c(1:dim(daily_agg)[1]))
summary(daily_agg[,adm_types])
# Get holiday calendar ----------------------------------
holidays <-  as.Date(holidayNYSE(2010:2017))
daily_agg <- daily_agg %>%
mutate(isHoliday = ifelse(date %in% holidays,1,0))
describe(daily_agg)
# Define vars for analysis ----------------------------------
daily_agg <- daily_agg %>%
mutate(adm_core_mod = ifelse(adm_core<1, 1, adm_core),
ln_adm_core = log(adm_core_mod))
daily_agg <-
daily_agg %>%
group_by(month) %>%
mutate(adm_core_m = mean(adm_core)) %>%
ungroup()
adm_types_w<-paste(adm_types,"_w",sep="",collapse =NULL)
daily_agg <-
daily_agg %>%
group_by(week) %>%
mutate_at(vars(adm_types), funs("w"=mean(.))) %>%
ungroup() %>%
mutate_at(vars(all_of(adm_types_w)), funs("lag"=Lag(.,365)))
daily_agg <-
daily_agg %>%
group_by(month, dow) %>%
mutate(adm_core_md = mean(adm_core),
ln_adm_core_md = log(adm_core_md)) %>%
ungroup()
################################
# Descriptive graphs ----------
#################################
# named date vars for graphs
mydays <- c("Mon","Tue","Wed",
"Thu","Fri","Sat",
"Sun")
daily_agg$dow_abb   <- factor(   mydays[daily_agg$dow],  levels=mydays)
daily_agg$month_abb <- factor(month.abb[daily_agg$month],levels=month.abb)
# Graphs
# Month - year plot
g0<-ggplot(daily_agg,aes(x=year,y=adm_core))+
geom_bar(aes(fill=adm_core),position="dodge", stat="identity")+
facet_wrap(. ~ month_abb ,scales = 'free')+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
legend.position = "none")
g0
# ggsave("out/swimming_pools_month_admissions_core.png", dpi = 1200)
# Admission core 2015
g1 <-ggplot(data=daily_agg[daily_agg$year==2015,], aes(x=date, y=adm_com)) +
geom_line(size=0.4, color=color[1]) +
scale_x_date(breaks = as.Date(c("2015-01-01","2015-04-01","2015-07-01","2015-10-01","2016-01-01")),
labels = date_format("%d%b%Y"),
date_minor_breaks = "1 month" ) +
labs(title= "Number of tickets sold in 2015 (Core)", x = "Day", y="Number of tickets sold (Core, Daily)" ) +
scale_color_discrete(name = "")
g1
# ggsave("out/swimming_pools_2015_admissions_core.png", dpi = 1200)
# Admission core 2015 - other admissions 2015
gl<-list()
lags<-colnames(daily_agg %>% select(matches("*._lag")))
names<-c("Community","Lessons","Promotion","School","Spec Event","Swim Team")
daily_agg<-daily_agg %>%
mutate_at(vars(all_of(lags)), funs("scaled"=scale(.)))
scaled_vars<-colnames(daily_agg %>% select(matches("*._lag_scaled")))[-1]
for (i in 1:6){
var<-scaled_vars[i]
name<-names[i]
p<-ggplot(data=daily_agg[daily_agg$year==2015,]) +
geom_line(aes(x=date, y=scale(adm_core), color="purple"),size=1) +
geom_line(aes_string(x="date", y=var, color=shQuote("orange")),size=1) +
scale_x_date(breaks = as.Date(c("2015-01-01","2015-04-01","2015-07-01","2015-10-01","2016-01-01")),
labels = date_format("%d%b%Y"),
date_minor_breaks = "1 month" ) +
labs(subtitle= paste0("Number of tickets sold in 2015"," (",name,")"), x = "Day", y="# Tickets"," (",names[i],",Daily)" ) +
scale_color_manual(name="Category", values=c(purple=color[1],orange=color[2]),labels = c("Core", name))+
theme(legend.position="bottom")
gl[[i]]<-p
}
gl_grid<-plot_grid(plotlist = gl,nrow = 3,ncol=2)
gl_grid
# ggsave("out/swimming_pools_2015_admissions_others.png", dpi = 1200,width = mywidth, height = 7)
# Admission core 2010-2014
g2<-ggplot(data=daily_agg[(daily_agg$year>=2010) & (daily_agg$year<=2014),], aes(x=date, y=adm_core)) +
geom_line(size=0.2, color=color[1]) +
scale_x_date(breaks = as.Date(c("2010-01-01","2011-01-01","2012-01-01","2013-01-01","2014-01-01","2015-01-01")),
labels = date_format("%d%b%Y"),
minor_breaks = "3 months") +
labs(title= "Number of tickets sold 2010-2014 (Core)", x = "Day", y="Number of tickets sold (Core, Daily)" ) +
scale_color_discrete(name = "")
g2
# ggsave("out/swimming_pools_2010_2014_admissions_core.png", dpi = 1200)
# Admission core by month discrete
g3<-ggplot(data=daily_agg, aes(x=month_abb, y=adm_core)) +
labs(title= "Number of tickets sold by month (Core)", x = "Month", y="Number of tickets sold (Core)" ) +
geom_boxplot(color=color[1],outlier.color = color[4], outlier.alpha = 0.6, outlier.size = 0.6)
g3
# ggsave("out/swimming_pools_monthly_admissions_core.png", dpi = 1200)
# Admission core by day of the week
g4<-ggplot(data=daily_agg, aes(x=dow_abb, y=adm_core)) +
labs(title= "Number of tickets sold by day of the week (Core)", x = "Day of the week", y="Number of tickets sold (Core)" ) +
geom_boxplot(color=color[1],outlier.color = color[4], outlier.alpha = 0.6, outlier.size = 0.4)
g4
# ggsave("out/swimming_pools_dow_admissions_core.png", dpi = 1200)
# Month - day of the week admission core heatmap
# to check for interactions, look at the heatmap
swim_heatmap <-
ggplot(daily_agg, aes(x = dow_abb, y = month_abb, fill = adm_core_md)) +
geom_tile(colour = "white") +
labs(subtitle="Average ticket sales by day of week and month", x = 'Day of the week', y = 'Month') +
scale_fill_viridis(alpha = 0.7, begin = 1, end = 0.2, direction = 1, option = "A") +
theme(legend.position = "right",
legend.text = element_text(size=6),
legend.title =element_text(size=6)
)
swim_heatmap
# ggsave("out/swimming_pools_md_heatmap_admissions_core.png", dpi = 1200)
#####################################
# PREDICTION  ----------
#####################################
# discard 2010 to use lag variables
daily_agg <- daily_agg %>%
filter(year!=2010)
# Create train/houldout data
# Last year of data
data_holdout<- daily_agg %>%
filter(year==2016)
# Rest of data for training
data_train <- daily_agg %>%
filter(year<2016)
# Prepare for cross-validation
data_train <- data_train %>%
rownames_to_column() %>%
mutate(rowname = as.integer(rowname))
test_index_list <- data_train %>%
split(f = factor(data_train$year)) %>%
lapply(FUN = function(x){x$rowname})
train_index_list <- test_index_list %>%
lapply(FUN = function(x){setdiff(data_train$rowname, x)})
train_control <- trainControl(
method = "cv",
index = train_index_list, #index of train data for each fold
savePredictions = TRUE
)
# Fit models ---------------------------------------------------------
lags<-c("adm_com_w_lag","adm_less_w_lag","adm_sch_w_lag","adm_spec_w_lag","adm_swim_w_lag","adm_prom_w_lag")
X1<-paste(lags,"month",sep="*")
#Model 1 (Baseline) linear trend + monthly seasonality
model1 <- as.formula(adm_core ~ 1 + trend + month + dow)
reg1 <- train(
model1,
method = "lm",
data = data_train,
trControl = train_control
)
#Model 2 linear trend + monthly seasonality + days of week  seasonality + holidays + sch*dow
model2 <- as.formula(adm_core ~ 1 + trend + month + dow + isHoliday + school_off*dow)
reg2 <- train(
model2,
method = "lm",
data = data_train,
trControl = train_control
)
#Model 3 linear trend + monthly seasonality + days of week  seasonality + holidays + other lagged variables + interactions
model3 <- formula(paste0("adm_core"," ~ ",
paste(c("1","trend", "month", "dow", "isHoliday", "school_off*dow", "weekend*month",lags,X1)
,collapse = " + ")
,collapse = NULL))
reg3 <- train(
model3,
method = "lm",
data = data_train,
trControl = train_control
)
stargazer(reg1$finalModel, reg2$finalModel, reg3$finalModel,
out="out/reg_comparison.html", type = "html", digits=2)
# Get CV RMSE ----------------------------------------------
model_names <- c("reg1","reg2","reg3")
rmse_CV <- c()
for (i in model_names) {
rmse_CV[i]  <- get(i)$results$RMSE
}
rmse_cv_df<-as.data.frame(rmse_CV)
rmse_cv_df$rel_rmse_cv<-rmse_cv_df$rmse_CV/mean(daily_agg$adm_core)
rmse_cv_df
# Initialize environment --------------------------------------------------
# CLEAR MEMORY
rm(list=ls())
# General
library(tidyverse)
library(Hmisc)
# Modeling
library(timeDate)
library(caret)
library(lubridate)
library(prophet)
# Parallel Computation
library(parallel)
library(doParallel)
# Visualization
library(stargazer)
library(scales)
library(ggplot2)
library(cowplot)
library(viridis)
library(party)
library(GGally)
library(pROC)
library(knitr)
source("codes/helper.R")
#import data
daily_agg<-read.csv("data/clean/swim_work.csv") %>%
mutate(date = as.Date(date))
adm_types<-colnames(daily_agg %>% select(matches("adm_.*")))
# dow: 1=Monday, weekend: Sat and Sun.
daily_agg <- daily_agg %>%
mutate(year = year(date),
quarter = quarter(date),
month = factor(month(date)),
week= factor(week(date)),
day = day(date)) %>%
mutate(dow = factor(wday(date, week_start = getOption("lubridate.week.start", 1)))) %>%
mutate(weekend = factor(as.integer(dow %in% c(6,7))))
daily_agg <- daily_agg %>%
mutate(school_off = ((day>15 & month==5 & day <=30) | (month==6 |  month==7) |
(day<15 & month==8) | (day>20 & month==12) ))
daily_agg <- daily_agg %>%
mutate(trend = c(1:dim(daily_agg)[1]))
# summary(daily_agg[,adm_types])
# Get holiday calendar ----------------------------------
holidays <-  as.Date(holidayNYSE(2010:2017))
daily_agg <- daily_agg %>%
mutate(isHoliday = ifelse(date %in% holidays,1,0))
# describe(daily_agg)
# Define vars for analysis ----------------------------------
daily_agg <- daily_agg %>%
mutate(adm_core_mod = ifelse(adm_core<1, 1, adm_core),
ln_adm_core = log(adm_core_mod))
daily_agg <-
daily_agg %>%
group_by(month) %>%
mutate(adm_core_m = mean(adm_core)) %>%
ungroup()
adm_types_w<-paste(adm_types,"_w",sep="",collapse =NULL)
daily_agg <-
daily_agg %>%
group_by(week) %>%
mutate_at(vars(adm_types), funs("w"=mean(.))) %>%
ungroup() %>%
mutate_at(vars(all_of(adm_types_w)), funs("lag"=Lag(.,365)))
daily_agg <-
daily_agg %>%
group_by(month, dow) %>%
mutate(adm_core_md = mean(adm_core),
ln_adm_core_md = log(adm_core_md)) %>%
ungroup()
################################
# Descriptive graphs ----------
#################################
# named date vars for graphs
mydays <- c("Mon","Tue","Wed",
"Thu","Fri","Sat",
"Sun")
daily_agg$dow_abb   <- factor(   mydays[daily_agg$dow],  levels=mydays)
daily_agg$month_abb <- factor(month.abb[daily_agg$month],levels=month.abb)
# Graphs
# Month - year plot
g0<-ggplot(daily_agg,aes(x=year,y=adm_core))+
geom_bar(aes(fill=adm_core),position="dodge", stat="identity")+
facet_wrap(. ~ month_abb ,scales = 'free')+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
legend.position = "none")
g0
# ggsave("out/swimming_pools_month_admissions_core.png", dpi = 1200)
# Admission core 2015
g1 <-ggplot(data=daily_agg[daily_agg$year==2015,], aes(x=date, y=adm_com)) +
geom_line(size=0.4, color=color[1]) +
scale_x_date(breaks = as.Date(c("2015-01-01","2015-04-01","2015-07-01","2015-10-01","2016-01-01")),
labels = date_format("%d%b%Y"),
date_minor_breaks = "1 month" ) +
labs(title= "Number of tickets sold in 2015 (Core)", x = "Day", y="Number of tickets sold (Core, Daily)" ) +
scale_color_discrete(name = "")
g1
# ggsave("out/swimming_pools_2015_admissions_core.png", dpi = 1200)
# Admission core 2015 - other admissions 2015
gl<-list()
lags<-colnames(daily_agg %>% select(matches("*._lag")))
names<-c("Community","Lessons","Promotion","School","Spec Event","Swim Team")
daily_agg<-daily_agg %>%
mutate_at(vars(all_of(lags)), funs("scaled"=scale(.)))
scaled_vars<-colnames(daily_agg %>% select(matches("*._lag_scaled")))[-1]
for (i in 1:6){
var<-scaled_vars[i]
name<-names[i]
p<-ggplot(data=daily_agg[daily_agg$year==2015,]) +
geom_line(aes(x=date, y=scale(adm_core), color="purple"),size=1) +
geom_line(aes_string(x="date", y=var, color=shQuote("orange")),size=1) +
scale_x_date(breaks = as.Date(c("2015-01-01","2015-04-01","2015-07-01","2015-10-01","2016-01-01")),
labels = date_format("%d%b%Y"),
date_minor_breaks = "1 month" ) +
labs(subtitle= paste0("Number of tickets sold in 2015"," (",name,")"), x = "Day", y="# Tickets"," (",names[i],",Daily)" ) +
scale_color_manual(name="Category", values=c(purple=color[1],orange=color[2]),labels = c("Core", name))+
theme(legend.position="bottom")
gl[[i]]<-p
}
gl_grid<-plot_grid(plotlist = gl,nrow = 3,ncol=2)
gl_grid
# ggsave("out/swimming_pools_2015_admissions_others.png", dpi = 1200,width = mywidth, height = 7)
gl_grid
# Admission core by day of the week
g4<-ggplot(data=daily_agg, aes(x=dow_abb, y=adm_school)) +
labs(title= "Number of tickets sold by day of the week (Core)", x = "Day of the week", y="Number of tickets sold (Core)" ) +
geom_boxplot(color=color[1],outlier.color = color[4], outlier.alpha = 0.6, outlier.size = 0.4)
g4
# Admission core by day of the week
g4<-ggplot(data=daily_agg, aes(x=dow_abb, y=adm_sch)) +
labs(title= "Number of tickets sold by day of the week (Core)", x = "Day of the week", y="Number of tickets sold (Core)" ) +
geom_boxplot(color=color[1],outlier.color = color[4], outlier.alpha = 0.6, outlier.size = 0.4)
g4
# Admission core by day of the week
g4<-ggplot(data=daily_agg, aes(x=dow_abb, y=mean(adm_sch))) +
labs(title= "Number of tickets sold by day of the week (Core)", x = "Day of the week", y="Number of tickets sold (Core)" ) +
geom_bar(color=color[1])
g4
# Admission core by day of the week
g4<-ggplot(data=daily_agg, aes(x=dow_abb, y=adm_sch)) +
labs(title= "Number of tickets sold by day of the week (Core)", x = "Day of the week", y="Number of tickets sold (Core)" ) +
geom_bar(color=color[1])
g4
# Admission core by day of the week
g4<-ggplot(data=daily_agg, aes(x=dow_abb, y=adm_sch)) +
labs(title= "Number of tickets sold by day of the week (Core)", x = "Day of the week", y="Number of tickets sold (Core)" ) +
geom_bar(color=color[1])
g4
# Admission core by day of the week
g4<-ggplot(data=daily_agg, aes(x=dow_abb, y=adm_sch)) +
labs(title= "Number of tickets sold by day of the week (Core)", x = "Day of the week", y="Number of tickets sold (Core)" ) +
geom_bar(color=color[1])
g4
# Month - day of the week admission core heatmap
# to check for interactions, look at the heatmap
swim_heatmap <-
ggplot(daily_agg, aes(x = dow_abb, y = month_abb, fill = adm_core_md)) +
geom_tile(colour = "white") +
labs(subtitle="Average ticket sales by day of week and month", x = 'Day of the week', y = 'Month') +
scale_fill_viridis(alpha = 0.7, begin = 1, end = 0.2, direction = 1, option = "A") +
theme(legend.position = "right",
legend.text = element_text(size=6),
legend.title =element_text(size=6)
)
swim_heatmap
colnames(rmse_cv_df)<-c(`Test RMSE CV`,`Rel. Test RMSE CV`)
kable(rmse_cv_df)
# Admission core by day of the week
g4<-ggplot(data=daily_agg, aes(x=dow_abb, y=adm_core)) +
labs(title= "Number of tickets sold by day of the week (Core)", x = "Day of the week", y="Number of tickets sold (Core)" ) +
geom_boxplot(color=color[1],outlier.color = color[4], outlier.alpha = 0.6, outlier.size = 0.4)
g4
g4
